name: "CI Backend - Build, Test & Security Scan"

on:
  push:
    branches:
      - main
      - "feature/**"
      - "hotfix/**"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  JAVA_VERSION: "17"
  MAVEN_OPTS: "-Xmx1024m"

jobs:
  setup:
    name: üìê Setup Environment
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-m2.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Maven local repository
        id: cache-m2
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Prepare - download dependencies (go-offline)
        run: mvn -B -ntp dependency:go-offline

  lint:
    name: üß™ Lint Code (project configured linters)
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
      - name: Cache Maven local repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
      - name: Run Lint/Static Checks
        # run configured static analysis plugins (checkstyle/spotbugs/pmd) if present
        run: mvn -B -DskipTests=true verify || true

  unit-test:
    name: üß™ Run Unit Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
      - name: Cache Maven local repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
      - name: Run tests
        run: mvn -B test
      - name: Generate JaCoCo report
        run: mvn -B jacoco:report
      - name: Upload Coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: target/site/jacoco
          retention-days: 7

  build:
    name: üèóÔ∏è Build Backend
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
      - name: Cache Maven local repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
      - name: Build (package)
        run: mvn -B -DskipTests package
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image (CI verification)
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: false
          tags: fleet-service:ci-${{ github.run_id }}
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: target/*.jar
          retention-days: 1

  # owasp-sca:
  #   name: üîê SCA - OWASP Dependency Check
  #   runs-on: ubuntu-latest
  #   needs: [lint, unit-test, build]
  #   continue-on-error: true
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     - name: Set up JDK
  #       uses: actions/setup-java@v4
  #       with:
  #         distribution: temurin
  #         java-version: ${{ env.JAVA_VERSION }}
  #     - name: Cache Dependency-Check Data
  #       uses: actions/cache@v4
  #       with:
  #         path: ~/.dependency-check
  #         key: dependency-check-db-${{ runner.os }}
  #     - name: Run OWASP Dependency-Check (Maven plugin)
  #       run: |
  #         mvn -B org.owasp:dependency-check-maven:check \
  #           -Dformat=XML \
  #           -DoutputDirectory=dependency-check-report || true
  #     - name: Log HIGH/CRITICAL Vulnerabilities (report-only)
  #       run: |
  #         echo "Scanning dependency-check report for HIGH or CRITICAL vulnerabilities..."
  #         if [ -f dependency-check-report/dependency-check-report.xml ]; then
  #           if grep -i -E "critical|high" dependency-check-report/dependency-check-report.xml >/dev/null 2>&1; then
  #             echo "‚ö†Ô∏è Found HIGH or CRITICAL vulnerabilities in dependency-check report"
  #             grep -i -n -E "critical|high" dependency-check-report/dependency-check-report.xml || true
  #           else
  #             echo "‚úÖ No HIGH/CRITICAL vulnerabilities found"
  #           fi
  #         else
  #           echo "‚ÑπÔ∏è dependency-check XML report not found; skipping severity scan"
  #         fi
  #     - name: Upload OWASP Report
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: owasp-report
  #         path: dependency-check-report/dependency-check-report.xml
  #         retention-days: 7

  # codeql-sast:
  #   name: ‚ò¢Ô∏è SAST - CodeQL
  #   runs-on: ubuntu-latest
  #   needs: [lint, unit-test, build]
  #   permissions:
  #     actions: read
  #     contents: read
  #     security-events: write
  #   continue-on-error: true
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     - name: Initialize CodeQL
  #       uses: github/codeql-action/init@v3
  #       with:
  #         languages: java
  #     - name: Autobuild
  #       uses: github/codeql-action/autobuild@v3
  #     - name: Analyse
  #       uses: github/codeql-action/analyze@v3
